services:
  neo4j:
    image: neo4j:5.15-community
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_http_listenaddress=0.0.0.0:7474
      - NEO4J_server_bolt_listenaddress=0.0.0.0:7687
      - NEO4J_initial_dbms_defaultdatabase=authdata
      - NEO4J_server_memory_heap_maxsize=12G
      - NEO4J_dbms_memory_transaction_total_max=12G
      - NEO4J_PLUGINS='["apoc"]'
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_server_config_strict__validation_enabled=false
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - ./import_data.cypher:/var/lib/neo4j/import/import_data.cypher
      - ./output.csv:/var/lib/neo4j/import/output.csv
    networks:
      - app-network
   
  neo4j-importer:
    image: neo4j:5.15-community
    volumes:
      - ./import_data.cypher:/import/import_data.cypher
      - ./output.csv:/import/output.csv
    networks:
      - app-network
    command: |
      bash -c "
        echo 'Waiting for Neo4j to be ready...'
        while ! cypher-shell -a bolt://neo4j:7687 -u neo4j -p password123 'RETURN 1' > /dev/null 2>&1; do
          echo 'Neo4j not ready yet, waiting 5 seconds...'
          sleep 5
        done
       
        echo 'Neo4j is ready! Starting data import...'
       
        if [ ! -f '/import/output.csv' ]; then
          echo 'Warning: /import/output.csv not found!'
          echo 'Please make sure your CSV file is mounted to the container.'
          exit 1
        fi
       
        echo 'CSV file found, starting import process...'
       
        # Run the import script
        cypher-shell -a bolt://neo4j:7687 -u neo4j -p password123 -f /import/import_data.cypher
       
        if [ $$? -eq 0 ]; then # <-- This is the corrected line
          echo 'Data import completed successfully!'
         
          # Show some statistics
          echo 'Getting import statistics...'
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p password123 'MATCH (s:ImportStats) RETURN s.total_events as TotalEvents, s.redteam_events as RedTeamEvents, s.benign_events as BenignEvents, s.unique_timestamps as UniqueTimestamps, s.import_date as ImportDate'
         
          echo 'Sample queries you can run:'
          echo '1. Count events by type: MATCH (a:AuthEvent) RETURN a.auth_type, count() ORDER BY count() DESC'
          echo '2. Find red team events: MATCH (a:AuthEvent) WHERE a.is_redteam = 1 RETURN a LIMIT 10'
          echo '3. User authentication patterns: MATCH (u:User)-[:AUTHENTICATED_FROM]->(c:Computer) RETURN u.name, count(c) as computer_count ORDER BY computer_count DESC LIMIT 10'
        else
          echo 'Data import failed!'
          exit 1
        fi
      "
    restart: "no"
  python-app:
    build:
      context: .
      dockerfile: Dockerfile.python
    depends_on:
      neo4j:
        condition: service_started
      ollama:
        condition: service_started
    ports:
      - "7860:7860"
    volumes:
      - ./src:/app/src
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123
      - OLLAMA_BASE_URL=http://ollama:11434
    networks:
      - app-network
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  ollama_data:
networks:
  app-network:
    driver: bridge